// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TeamRole {
  ADMIN
  MEMBER
  // You can add more roles as needed
}

model User {
  id                    Int          @id @default(autoincrement())
  email                 String       @unique
  auth_provider_user_id Int
  auth_provider         String       @default("github")
  full_name             String
  avatar_url            String?
  created_at            DateTime     @default(now())
  updated_at            DateTime     @updatedAt
  ownedTeams            Team[]       @relation("TeamOwner")
  teamMembers           TeamMember[]
}

model Team {
  id          Int          @id @default(autoincrement())
  ownerId     Int
  name        String
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  owner       User         @relation("TeamOwner", fields: [ownerId], references: [id])
  teamMembers TeamMember[]
  invitations TeamInvitation[]
}

model TeamMember {
  id        Int      @id @default(autoincrement())
  teamId    Int
  userId    Int
  role      TeamRole @default(MEMBER)
  joinedAt  DateTime @default(now())

  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model TeamInvitation {
  id         Int      @id @default(autoincrement())
  teamId     Int
  email      String
  token      String   @unique
  role       TeamRole @default(MEMBER)
  expiresAt  DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  isUsed     Boolean  @default(false)

  team       Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([email])
}
